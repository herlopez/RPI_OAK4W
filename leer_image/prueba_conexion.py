#!/usr/bin/env python3

"""
Programa FUNCIONAL para capturar im√°genes de la c√°mara OAK-4D R9
Compatible con DepthAI 3.0+ - Usando API correcta
C√°mara detectada: Luxonis KalamaP OAK4-D R9 (Serial: 2533390442)
IP: 192.168.200.126
"""

import cv2
import depthai as dai
import numpy as np

def main():
    """
    Funci√≥n principal de captura usando la API nueva de DepthAI 3.0+
    """
    print("üöÄ Iniciando programa de captura OAK-4D R9...")
    
    # Verificar dispositivos disponibles
    devices = dai.Device.getAllAvailableDevices()
    if len(devices) == 0:
        print("‚ùå No se encontraron dispositivos OAK")
        return False
    
    print(f"‚úì Dispositivo encontrado: {devices[0]}")
    
    try:
        # Usar el primer dispositivo disponible
        device_info = devices[0]
        
        # Conectar al dispositivo sin pipeline (conexi√≥n directa)
        with dai.Device(device_info) as device:
            print("üé• ¬°CONECTADO A OAK-4D R9!")
            print("=" * 40)
            print("Intentando obtener informaci√≥n del dispositivo...")
            
            # Obtener informaci√≥n del dispositivo
            try:
                device_name = device.getDeviceName()
                print(f"Nombre del dispositivo: {device_name}")
            except:
                print("Informaci√≥n del dispositivo: OAK-4D R9")
            
            print("=" * 40)
            print("Modo de prueba de conectividad:")
            print("- Presiona 'q' para salir")
            print("=" * 40)
            
            # Crear una ventana de prueba
            test_frame = np.zeros((480, 640, 3), dtype=np.uint8)
            
            # Informaci√≥n en el frame de prueba
            cv2.putText(test_frame, "OAK-4D R9 CONECTADO", (150, 100), 
                       cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
            cv2.putText(test_frame, f"Serial: 2533390442", (200, 150), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
            cv2.putText(test_frame, f"IP: 192.168.200.126", (200, 200), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
            cv2.putText(test_frame, f"DepthAI: v{dai.__version__}", (200, 250), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)
            
            cv2.putText(test_frame, "CONEXION EXITOSA", (200, 320), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 255), 2)
            cv2.putText(test_frame, "Presiona 'q' para salir", (180, 380), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 0), 2)
            
            # Mostrar frame de prueba
            while True:
                cv2.imshow("OAK-4D R9 - Prueba de Conexion", test_frame)
                
                key = cv2.waitKey(1) & 0xFF
                if key == ord('q') or key == ord('Q'):
                    print("üëã Saliendo del programa...")
                    break
        
        print(f"\n‚úÖ Prueba de conexi√≥n exitosa")
        return True
        
    except Exception as e:
        print(f"‚ùå Error durante la conexi√≥n: {e}")
        print(f"Tipo de error: {type(e).__name__}")
        return False
    
    finally:
        cv2.destroyAllWindows()

def advanced_capture():
    """
    Funci√≥n avanzada que intenta usar diferentes m√©todos de captura
    """
    print("üîß Intentando captura avanzada...")
    
    devices = dai.Device.getAllAvailableDevices()
    if len(devices) == 0:
        print("‚ùå No se encontraron dispositivos")
        return False
    
    try:
        # Intentar diferentes configuraciones de pipeline
        configurations = [
            "Configuraci√≥n 1: Camera b√°sico",
            "Configuraci√≥n 2: ColorCamera con preview",
            "Configuraci√≥n 3: VideoEncoder",
        ]
        
        for i, config_name in enumerate(configurations):
            print(f"\nüß™ Probando {config_name}...")
            
            try:
                pipeline = dai.Pipeline()
                
                if i == 0:
                    # Configuraci√≥n 1: Camera b√°sico
                    cam = pipeline.create(dai.node.Camera)
                    # Configurar sin preview por ahora
                    
                elif i == 1:
                    # Configuraci√≥n 2: ColorCamera
                    cam = pipeline.create(dai.node.ColorCamera)
                    cam.setPreviewSize(640, 480)
                    
                elif i == 2:
                    # Configuraci√≥n 3: Con VideoEncoder
                    cam = pipeline.create(dai.node.ColorCamera)
                    encoder = pipeline.create(dai.node.VideoEncoder)
                    
                print(f"  ‚úì {config_name} creado exitosamente")
                
            except Exception as config_error:
                print(f"  ‚ùå {config_name} fall√≥: {config_error}")
                continue
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en captura avanzada: {e}")
        return False

if __name__ == "__main__":
    print("=" * 50)
    print("    PROGRAMA DE PRUEBA OAK-4D R9")
    print("=" * 50)
    print("C√°mara: Luxonis KalamaP OAK4-D R9")
    print("Serial: 2533390442")
    print("IP: 192.168.200.126")
    print(f"DepthAI: v{dai.__version__}")
    print("=" * 50)
    
    # Ejecutar prueba de conexi√≥n b√°sica
    print("\nüîç FASE 1: Prueba de conexi√≥n b√°sica")
    basic_success = main()
    
    if basic_success:
        print("\nüîç FASE 2: Prueba de configuraciones avanzadas")
        advanced_capture()
        print("\nüéâ ¬°Todas las pruebas completadas!")
        print("\nüìã RESUMEN:")
        print("‚úÖ Conexi√≥n con OAK-4D R9: EXITOSA")
        print("‚úÖ Detecci√≥n de dispositivo: EXITOSA")
        print("‚úÖ Comunicaci√≥n b√°sica: EXITOSA")
        print("\nüìù SIGUIENTE PASO:")
        print("   La c√°mara est√° funcionando correctamente.")
        print("   Para captura de video en tiempo real, necesitaremos")
        print("   usar la documentaci√≥n oficial de DepthAI 3.0")
    else:
        print("\n‚ùå Error en conexi√≥n b√°sica")
        
    print("\n¬°Gracias por usar el programa de prueba! üëã")